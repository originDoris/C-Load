/*
 * This file is generated by jOOQ.
 */
package com.cl.repository.tables.daos;


import com.cl.framework.plugin.jooq.shared.reactive.AbstractReactiveVertxDAO;
import com.cl.repository.tables.ClCodeConfig;
import com.cl.repository.tables.records.ClCodeConfigRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.rxjava3.core.Single;
import java.util.Optional;
import com.cl.framework.plugin.jooq.rx3.ReactiveRXQueryExecutor;
/**
 * 代码配置
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClCodeConfigDao extends AbstractReactiveVertxDAO<ClCodeConfigRecord, com.cl.repository.tables.pojos.ClCodeConfig, Long, Single<List<com.cl.repository.tables.pojos.ClCodeConfig>>, Single<Optional<com.cl.repository.tables.pojos.ClCodeConfig>>, Single<Integer>, Single<Long>> implements com.cl.framework.plugin.jooq.rx3.VertxDAO<ClCodeConfigRecord,com.cl.repository.tables.pojos.ClCodeConfig,Long> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public ClCodeConfigDao(Configuration configuration, io.vertx.rxjava3.sqlclient.SqlClient delegate) {
                super(ClCodeConfig.CL_CODE_CONFIG, com.cl.repository.tables.pojos.ClCodeConfig.class, new ReactiveRXQueryExecutor<ClCodeConfigRecord,com.cl.repository.tables.pojos.ClCodeConfig,Long>(configuration,delegate,com.cl.repository.tables.mappers.RowMappers.getClCodeConfigMapper()));
        }

        @Override
        protected Long getId(com.cl.repository.tables.pojos.ClCodeConfig object) {
                return object.getId();
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByGmtCreate(Collection<LocalDateTime> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.GMT_CREATE.in(values));
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByGmtCreate(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.GMT_CREATE.in(values),limit);
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByGmtModified(Collection<LocalDateTime> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.GMT_MODIFIED.in(values));
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByGmtModified(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.GMT_MODIFIED.in(values),limit);
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByCreator(Collection<String> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.CREATOR.in(values));
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByCreator(Collection<String> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.CREATOR.in(values),limit);
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByEditor(Collection<String> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.EDITOR.in(values));
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByEditor(Collection<String> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.EDITOR.in(values),limit);
        }

        /**
     * Find records that have <code>dsl IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByDsl(Collection<String> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.DSL.in(values));
        }

        /**
     * Find records that have <code>dsl IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByDsl(Collection<String> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.DSL.in(values),limit);
        }

        /**
     * Find records that have <code>content IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByContent(Collection<String> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.CONTENT.in(values));
        }

        /**
     * Find records that have <code>content IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByContent(Collection<String> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.CONTENT.in(values),limit);
        }

        /**
     * Find records that have <code>status IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.STATUS.in(values));
        }

        /**
     * Find records that have <code>status IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByIsDelete(Collection<Short> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.IS_DELETE.in(values));
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByIsDelete(Collection<Short> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.IS_DELETE.in(values),limit);
        }

        /**
     * Find records that have <code>tenant_id IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByTenantId(Collection<Long> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.TENANT_ID.in(values));
        }

        /**
     * Find records that have <code>tenant_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByTenantId(Collection<Long> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.TENANT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>code_name IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByCodeName(Collection<String> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.CODE_NAME.in(values));
        }

        /**
     * Find records that have <code>code_name IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByCodeName(Collection<String> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.CODE_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>desc IN (values)</code> asynchronously
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByDesc(Collection<String> values) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.DESC.in(values));
        }

        /**
     * Find records that have <code>desc IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.cl.repository.tables.pojos.ClCodeConfig>> findManyByDesc(Collection<String> values, int limit) {
                return findManyByCondition(ClCodeConfig.CL_CODE_CONFIG.DESC.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<ClCodeConfigRecord,com.cl.repository.tables.pojos.ClCodeConfig,Long> queryExecutor(){
                return (ReactiveRXQueryExecutor<ClCodeConfigRecord,com.cl.repository.tables.pojos.ClCodeConfig,Long>) super.queryExecutor();
        }
}
